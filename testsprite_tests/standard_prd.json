{
  "meta": {
    "project": "Telco Customer Churn Prediction",
    "date": "2025-08-31",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "A machine learning product designed to predict customer churn for a telecommunications company using the Telco Customer Churn dataset. The product encompasses a full data pipeline from ingestion and cleaning, feature engineering, model training and evaluation, to exporting actionable churn predictions for business intelligence tools, enabling targeted retention campaigns and customer segmentation.",
  "core_goals": [
    "Ingest and clean raw Telco customer data to a usable format for modeling.",
    "Engineer meaningful features including encoding categorical variables and creating engagement signals.",
    "Train and evaluate machine learning models (Logistic Regression and Random Forest) for churn prediction.",
    "Select and save the best performing model based on ROC-AUC and PR-AUC metrics.",
    "Export scored customer churn predictions for integration with BI dashboards for business decision-making.",
    "Facilitate business segmentation and customer retention strategies through churn insights."
  ],
  "key_features": [
    "Data ingestion and cleaning pipeline to handle missing values, convert categorical Yes/No columns to binary, and generate engagement signals.",
    "Feature engineering including one-hot encoding, feature selection, and train/test split preparation.",
    "Model training for multiple classification algorithms with evaluation using ROC-AUC and PR-AUC metrics.",
    "Best model persistence and export of churn scored datasets for external analysis.",
    "Segmentation of customers into usage and demographic buckets for targeted marketing campaigns.",
    "Comprehensive export functionality compatible with tools like Power BI, Tableau, and Excel."
  ],
  "user_flow_summary": [
    "User downloads the raw Telco customer churn dataset from Kaggle and places it in the designated raw data directory.",
    "User runs the ingestion and cleaning script to preprocess the raw data and generate a clean dataset.",
    "User runs the feature engineering process to create feature matrices and prepare train/test splits.",
    "User initiates model training which trains Logistic Regression and Random Forest models, evaluates them, and saves the best model.",
    "User exports churn prediction scores to CSV, which can then be used to create BI dashboards and reports.",
    "Business users utilize churn predictions and customer segments to drive retention campaigns and actionable insights."
  ],
  "validation_criteria": [
    "Successful loading and cleaning of raw CSV data with correct data type conversions and binary encoding of Yes/No fields.",
    "Correct one-hot encoding of categorical variables and proper train/test split generation.",
    "Trained models produce ROC-AUC and PR-AUC scores meeting predefined performance thresholds.",
    "The best performing model is saved as a reusable joblib artifact in the outputs directory.",
    "Exported churn scored CSV files are correctly formatted and contain expected prediction columns.",
    "BI dashboards reflect churn prediction metrics and segmentation accurately based on exported data."
  ],
  "code_summary": {
    "tech_stack": [
      "Python",
      "scikit-learn",
      "pandas",
      "numpy",
      "matplotlib",
      "seaborn",
      "imbalanced-learn",
      "joblib"
    ],
    "features": [
      {
        "name": "Data Ingestion and Cleaning",
        "description": "Loads raw Telco customer churn dataset, cleans data types, converts Yes/No columns to binary, and creates engagement signals",
        "files": [
          "scripts/ingest_telco.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Telco Data Ingestion API",
            "description": "Data cleaning and preprocessing pipeline for Telco customer churn dataset",
            "version": "1.0.0"
          },
          "paths": {
            "/ingest": {
              "post": {
                "summary": "Process raw Telco data",
                "description": "Loads raw CSV, cleans data types, creates binary features, and saves cleaned data",
                "responses": {
                  "200": {
                    "description": "Data successfully processed and saved"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Feature Engineering",
        "description": "Performs one-hot encoding of categorical variables, feature selection, and train/test split preparation",
        "files": [
          "scripts/feature_engineering.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Feature Engineering API",
            "description": "Feature preprocessing and train/test split for machine learning",
            "version": "1.0.0"
          },
          "paths": {
            "/engineer": {
              "post": {
                "summary": "Engineer features for ML",
                "description": "Creates feature matrices, performs encoding, and splits data for training",
                "responses": {
                  "200": {
                    "description": "Features engineered and saved successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Model Training and Evaluation",
        "description": "Trains Logistic Regression and Random Forest models, evaluates performance using ROC-AUC and PR-AUC metrics, and saves the best model",
        "files": [
          "scripts/train_model.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Model Training API",
            "description": "Machine learning pipeline for customer churn prediction",
            "version": "1.0.0"
          },
          "paths": {
            "/train": {
              "post": {
                "summary": "Train churn prediction models",
                "description": "Trains multiple ML models, evaluates performance, and saves the best model",
                "responses": {
                  "200": {
                    "description": "Models trained and best model saved successfully"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
