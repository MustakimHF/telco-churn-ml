{
  "tech_stack": [
    "Python",
    "scikit-learn",
    "pandas",
    "numpy",
    "matplotlib",
    "seaborn",
    "imbalanced-learn",
    "joblib"
  ],
  "features": [
    {
      "name": "Data Ingestion and Cleaning",
      "description": "Loads raw Telco customer churn dataset, cleans data types, converts Yes/No columns to binary, and creates engagement signals",
      "files": ["scripts/ingest_telco.py"],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Telco Data Ingestion API",
          "description": "Data cleaning and preprocessing pipeline for Telco customer churn dataset",
          "version": "1.0.0"
        },
        "paths": {
          "/ingest": {
            "post": {
              "summary": "Process raw Telco data",
              "description": "Loads raw CSV, cleans data types, creates binary features, and saves cleaned data",
              "responses": {
                "200": {
                  "description": "Data successfully processed and saved"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Feature Engineering",
      "description": "Performs one-hot encoding of categorical variables, feature selection, and train/test split preparation",
      "files": ["scripts/feature_engineering.py"],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Feature Engineering API",
          "description": "Feature preprocessing and train/test split for machine learning",
          "version": "1.0.0"
        },
        "paths": {
          "/engineer": {
            "post": {
              "summary": "Engineer features for ML",
              "description": "Creates feature matrices, performs encoding, and splits data for training",
              "responses": {
                "200": {
                  "description": "Features engineered and saved successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Model Training and Evaluation",
      "description": "Trains Logistic Regression and Random Forest models, evaluates performance using ROC-AUC and PR-AUC metrics, and saves the best model",
      "files": ["scripts/train_model.py"],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Model Training API",
          "description": "Machine learning pipeline for customer churn prediction",
          "version": "1.0.0"
        },
        "paths": {
          "/train": {
            "post": {
              "summary": "Train churn prediction models",
              "description": "Trains multiple ML models, evaluates performance, and saves the best model",
              "responses": {
                "200": {
                  "description": "Models trained and best model saved successfully"
                }
              }
            }
          }
        }
      }
    }
  ]
}
